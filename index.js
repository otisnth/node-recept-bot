import amqplib from "amqplib";
import fs from "fs";
import dotenv from "dotenv";
import { Telegraf, Scenes, session, Markup, Input } from "telegraf";
import { Client } from "basic-ftp";

dotenv.config();
const bot = new Telegraf(process.env.TELEGRAM_TOKEN);
const rabbit = amqplib.connect(process.env.RABBIT_URL);

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
const countryKeyboard = Markup.inlineKeyboard([
    [
        Markup.button.callback("üá®üá≥", JSON.stringify({ title: "–ö–∏—Ç–∞–π—Å–∫–∞—è", country: "Chinese" }), false),
        Markup.button.callback("üáÆüá±", JSON.stringify({ title: "–ò–∑—Ä–∞–∏–ª—å—Å–∫–∞—è", country: "Jewish" }), false),
        Markup.button.callback("üá©üá™", JSON.stringify({ title: "–ù–µ–º–µ—Ü–∫–∞—è", country: "German" }), false),
        Markup.button.callback("üá™üá∏", JSON.stringify({ title: "–ò—Å–ø–∞–Ω—Å–∫–∞—è", country: "Spanish" }), false),
    ],
    [
        Markup.button.callback("üá™üá∫", JSON.stringify({ title: "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è", country: "European" }), false),
        Markup.button.callback("üá´üá∑", JSON.stringify({ title: "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è", country: "French" }), false),
        Markup.button.callback("üá¨üáß", JSON.stringify({ title: "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∞—è", country: "British" }), false),
        Markup.button.callback("üá¨üá∑", JSON.stringify({ title: "–ì—Ä–µ—á–µ—Å–∫–∞—è", country: "Greek" }), false),
    ],
    [
        Markup.button.callback("üáÆüá≥", JSON.stringify({ title: "–ò–Ω–¥–∏–π—Å–∫–∞—è", country: "Indian" }), false),
        Markup.button.callback("üáÆüá™", JSON.stringify({ title: "–ò—Ä–ª–∞–Ω–¥—Å–∫–∞—è", country: "Irish" }), false),
        Markup.button.callback("üáÆüáπ", JSON.stringify({ title: "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è", country: "Italian" }), false),
        Markup.button.callback("üáØüáµ", JSON.stringify({ title: "–Ø–ø–æ–Ω—Å–∫–∞—è", country: "Japanese" }), false),
    ],
    [
        Markup.button.callback("üá∞üá∑", JSON.stringify({ title: "–ö–æ—Ä–µ–π—Å–∫–∞—è", country: "Korean" }), false),
        Markup.button.callback("üá≤üáΩ", JSON.stringify({ title: "–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è", country: "Mexican" }), false),
        Markup.button.callback("üáπüá≠", JSON.stringify({ title: "–¢–∞–π—Å–∫–∞—è", country: "Thai" }), false),
        Markup.button.callback("üá∫üá∏", JSON.stringify({ title: "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è", country: "American" }), false),
    ],
]).resize();

const mealTypesKeyboard = Markup.inlineKeyboard([
    [
        Markup.button.callback(
            "–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ",
            JSON.stringify({ title: "–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ", mealType: "main course" }),
            false
        ),
        Markup.button.callback("–ì–∞—Ä–Ω–∏—Ä", JSON.stringify({ title: "–ì–∞—Ä–Ω–∏—Ä", mealType: "side dish" }), false),
    ],
    [
        Markup.button.callback("–î–µ—Å–µ—Ä—Ç", JSON.stringify({ title: "–î–µ—Å–µ—Ä—Ç", mealType: "dessert" }), false),
        Markup.button.callback("–ó–∞–∫—É—Å–∫–∞", JSON.stringify({ title: "–ó–∞–∫—É—Å–∫–∞", mealType: "appetizer" }), false),
    ],
    [
        Markup.button.callback("–°–∞–ª–∞—Ç", JSON.stringify({ title: "–°–∞–ª–∞—Ç", mealType: "salad" }), false),
        Markup.button.callback("–ù–∞–ø–∏—Ç–æ–∫", JSON.stringify({ title: "–ù–∞–ø–∏—Ç–æ–∫", mealType: "drink" }), false),
    ],
    [
        Markup.button.callback("–ó–∞–≤—Ç—Ä–∞–∫", JSON.stringify({ title: "–ó–∞–≤—Ç—Ä–∞–∫", mealType: "breakfast" }), false),
        Markup.button.callback("–°—É–ø", JSON.stringify({ title: "–°—É–ø", mealType: "soup" }), false),
    ],
    [
        Markup.button.callback("–°–æ—É—Å", JSON.stringify({ title: "–°–æ—É—Å", mealType: "sauce" }), false),
        Markup.button.callback("–í—ã–ø–µ—á–∫–∞", JSON.stringify({ title: "–í—ã–ø–µ—á–∫–∞", mealType: "bread" }), false),
    ],
]);

const getReceptKeyboard = Markup.keyboard(["–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã"]).resize();
const removeKeyboard = Markup.removeKeyboard();
const toMainKeyboard = Markup.keyboard(["–ù–∞ –≥–ª–∞–≤–Ω—É—é"]).resize();

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FTP

async function downloadFromFTP(localPath, remotePath) {
    const client = new Client();
    client.ftp.verbose = true;
    try {
        await client.access({
            host: process.env.FTP_URL,
            user: process.env.FTP_LOGIN,
            password: process.env.FTP_PASS,
        });
        await client.downloadTo(localPath, remotePath);
    } catch (err) {
        console.log(err);
    }
    client.close();
}

async function removeFromFTP(remotePath) {
    const client = new Client();
    client.ftp.verbose = true;
    try {
        await client.access({
            host: process.env.FTP_URL,
            user: process.env.FTP_LOGIN,
            password: process.env.FTP_PASS,
        });
        await client.remove(remotePath);
    } catch (err) {
        console.log(err);
    }
    client.close();
}

// –†–∞–±–æ—Ç–∞ –∫—Ä–æ–ª–∏–∫–∞
rabbit
    .then(function (connection) {
        var ok = connection.createChannel();
        ok.then(function (channel) {
            // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—Ä–æ–ª–∏–∫–∞
            channel.assertQueue("receptRequest");
            channel.assertQueue("receptResponse");
            channel.assertExchange("recept");
            channel.bindQueue("receptRequest", "recept", "rreq");
            channel.bindQueue("receptResponse", "recept", "rres");

            let msgUpd;
            // –°—Ü–µ–Ω–∞ —Ñ–æ—Ä–º—ã –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
            const receptForm = new Scenes.WizardScene(
                "receptForm",
                async (ctx) => {
                    msgUpd = await ctx.reply("‚öôÔ∏è–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ", removeKeyboard);
                    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∫—É—Ö–Ω—é: ", countryKeyboard);
                    ctx.wizard.state.data = {};
                    return ctx.wizard.next();
                },
                async (ctx) => {
                    if (!ctx.callbackQuery) {
                        if (ctx.message.text === "/start") return ctx.scene.leave();
                        await ctx.deleteMessage();

                        return;
                    }

                    const callbackData = JSON.parse(ctx.callbackQuery.data);
                    ctx.wizard.state.messageText = `üåç${callbackData.title} –∫—É—Ö–Ω—è \n`;
                    await ctx.editMessageText(ctx.wizard.state.messageText + "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–ª—é–¥–∞: ", mealTypesKeyboard);

                    ctx.wizard.state.data.country = callbackData.country;

                    return ctx.wizard.next();
                },
                async (ctx) => {
                    if (!ctx.callbackQuery) {
                        if (ctx.message.text === "/start") return ctx.scene.leave();
                        await ctx.deleteMessage();

                        return;
                    }

                    const callbackData = JSON.parse(ctx.callbackQuery.data);
                    ctx.wizard.state.messageText += `üçΩÔ∏è–¢–∏–ø –±–ª—é–¥–∞: ${callbackData.title}\n`;
                    msgUpd = await ctx.editMessageText(
                        ctx.wizard.state.messageText + "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ (1-10): "
                    );

                    ctx.wizard.state.data.type = callbackData.mealType;

                    return ctx.wizard.next();
                },
                async (ctx) => {
                    if (ctx.message.text === "/start") return ctx.scene.leave();
                    if (isNaN(ctx.message.text)) {
                        await ctx.telegram.editMessageText(
                            msgUpd.chat.id,
                            msgUpd.message_id,
                            undefined,
                            ctx.wizard.state.messageText +
                                "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ (1-10): \n‚ùó–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"
                        );
                        await ctx.deleteMessage();

                        return;
                    }
                    if (ctx.message.text > 10 || ctx.message.text < 1) {
                        await ctx.telegram.editMessageText(
                            msgUpd.chat.id,
                            msgUpd.message_id,
                            undefined,
                            ctx.wizard.state.messageText +
                                "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ (1-10): \n‚ùó–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1-10"
                        );
                        await ctx.deleteMessage();

                        return;
                    }
                    await ctx.deleteMessage();
                    ctx.wizard.state.data.count = ctx.message.text;
                    ctx.wizard.state.data.telegram_id = ctx.update.message.chat.id;

                    ctx.wizard.state.messageText += `üìã–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: ${ctx.message.text}\n`;

                    await ctx.telegram.editMessageText(
                        msgUpd.chat.id,
                        msgUpd.message_id,
                        undefined,
                        ctx.wizard.state.messageText
                    );

                    channel.publish("recept", "rreq", Buffer.from(JSON.stringify(ctx.wizard.state.data)));
                    ctx.wizard.state.messageText += `‚úÖ–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ`;
                    await ctx.telegram.editMessageText(
                        msgUpd.chat.id,
                        msgUpd.message_id,
                        undefined,
                        ctx.wizard.state.messageText
                    );

                    return ctx.scene.leave();
                }
            );

            receptForm.leave(async (ctx) => {
                await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", getReceptKeyboard);
            });

            // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
            const stage = new Scenes.Stage([receptForm]);

            bot.use(session());
            bot.use(stage.middleware());

            bot.telegram.setMyCommands([
                { command: "start", description: "–ù–∞ –≥–ª–∞–≤–Ω—É—é" },
                { command: "help", description: "–ü–æ–º–æ—â—å" },
            ]);

            bot.start(async (ctx) => {
                await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–í–°!", getReceptKeyboard);
            });

            bot.help(async (ctx) => {
                await ctx.reply("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ /start");
            });

            bot.hears("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã", async (ctx) => await ctx.scene.enter("receptForm"));

            bot.hears("–ù–∞ –≥–ª–∞–≤–Ω—É—é", async (ctx) => await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–í–°!", getReceptKeyboard));

            bot.launch();

            channel.consume("receptResponse", async function (message) {
                let data = JSON.parse(message.content.toString());
                if (data.status === "error") {
                    await bot.telegram.sendMessage(data.telegram_id, "‚ùó" + data.message);
                    channel.ack(message);
                    return;
                }
                try {
                    await downloadFromFTP(`./storage/${data.file.split("/").at(-1)}`, data.file);
                    await bot.telegram.sendDocument(
                        data.telegram_id,
                        Input.fromLocalFile(`./storage/${data.file.split("/").at(-1)}`),
                        { caption: "üìï–í–∞—à–∞ –ø–æ–¥–±–æ—Ä–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤!" }
                    );
                    fs.unlinkSync(`./storage/${data.file.split("/").at(-1)}`);
                    await removeFromFTP(data.file);
                } catch (err) {
                    if (data?.telegram_id) {
                        await bot.telegram.sendMessage(
                            data.telegram_id,
                            "‚ùó–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
                        );
                    }
                }
                channel.ack(message);
            });
        });
        return ok;
    })
    .then(null, console.log);
