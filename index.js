import amqplib from "amqplib";
import dotenv from "dotenv";
import { Telegraf, Scenes, session, Markup } from "telegraf";
import { Client } from "basic-ftp";

dotenv.config();
const bot = new Telegraf(process.env.TELEGRAM_TOKEN);
const rabbit = amqplib.connect(process.env.RABBIT_URL);

const countryKeyboard = Markup.inlineKeyboard([
    [
        Markup.button.callback("üá®üá≥", JSON.stringify({ title: "üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∞—è", country: "Chinese" }), false),
        Markup.button.callback("üáÆüá±", JSON.stringify({ title: "üáÆüá± –ò–∑—Ä–∞–∏–ª—å—Å–∫–∞—è", country: "Jewish" }), false),
        Markup.button.callback("üá©üá™", JSON.stringify({ title: "üá©üá™ –ù–µ–º–µ—Ü–∫–∞—è", country: "German" }), false),
        Markup.button.callback("üá™üá∏", JSON.stringify({ title: "üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∞—è", country: "Spanish" }), false),
    ],
    [
        Markup.button.callback("üá™üá∫", JSON.stringify({ title: "üá™üá∫ –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è", country: "European" }), false),
        Markup.button.callback("üá´üá∑", JSON.stringify({ title: "üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è", country: "French" }), false),
        Markup.button.callback("üá¨üáß", JSON.stringify({ title: "üá¨üáß –ë—Ä–∏—Ç–∞–Ω—Å–∫–∞—è", country: "British" }), false),
        Markup.button.callback("üá¨üá∑", JSON.stringify({ title: "üá¨üá∑ –ì—Ä–µ—á–µ—Å–∫–∞—è", country: "Greek" }), false),
    ],
    [
        Markup.button.callback("üáÆüá≥", JSON.stringify({ title: "üáÆüá≥ –ò–Ω–¥–∏–π—Å–∫–∞—è", country: "Indian" }), false),
        Markup.button.callback("üáÆüá™", JSON.stringify({ title: "üáÆüá™ –ò—Ä–ª–∞–Ω–¥—Å–∫–∞—è", country: "Irish" }), false),
        Markup.button.callback("üáÆüáπ", JSON.stringify({ title: "üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è", country: "Italian" }), false),
        Markup.button.callback("üáØüáµ", JSON.stringify({ title: "üáØüáµ –Ø–ø–æ–Ω—Å–∫–∞—è", country: "Japanese" }), false),
    ],
    [
        Markup.button.callback("üá∞üá∑", JSON.stringify({ title: "üá∞üá∑ –ö–æ—Ä–µ–π—Å–∫–∞—è", country: "Korean" }), false),
        Markup.button.callback("üá≤üáΩ", JSON.stringify({ title: "üá≤üáΩ –ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è", country: "Mexican" }), false),
        Markup.button.callback("üáπüá≠", JSON.stringify({ title: "üáπüá≠ –¢–∞–π—Å–∫–∞—è", country: "Thai" }), false),
        Markup.button.callback("üá∫üá∏", JSON.stringify({ title: "üá∫üá∏ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è", country: "American" }), false),
    ],
]).resize();

const mealTypesKeyboard = Markup.inlineKeyboard([
    [
        Markup.button.callback(
            "–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ",
            JSON.stringify({ a: "selectMealType", mealType: "main course" }),
            false
        ),
        Markup.button.callback("–ì–∞—Ä–Ω–∏—Ä", JSON.stringify({ a: "selectMealType", mealType: "side dish" }), false),
    ],
    [
        Markup.button.callback("–î–µ—Å–µ—Ä—Ç", JSON.stringify({ a: "selectMealType", mealType: "dessert" }), false),
        Markup.button.callback("–ó–∞–∫—É—Å–∫–∞", JSON.stringify({ a: "selectMealType", mealType: "appetizer" }), false),
    ],
    [
        Markup.button.callback("–°–∞–ª–∞—Ç", JSON.stringify({ a: "selectMealType", mealType: "salad" }), false),

        Markup.button.callback("–ù–∞–ø–∏—Ç–æ–∫", JSON.stringify({ a: "selectMealType", mealType: "drink" }), false),
    ],
    [
        Markup.button.callback("–ó–∞–≤—Ç—Ä–∞–∫", JSON.stringify({ a: "selectMealType", mealType: "breakfast" }), false),
        Markup.button.callback("–°—É–ø", JSON.stringify({ a: "selectMealType", mealType: "soup" }), false),
    ],
    [
        Markup.button.callback("–°–æ—É—Å", JSON.stringify({ a: "selectMealType", mealType: "sauce" }), false),
        Markup.button.callback("–í—ã–ø–µ—á–∫–∞", JSON.stringify({ a: "selectMealType", mealType: "bread" }), false),
    ],
]);

const receptForm = new Scenes.WizardScene(
    "receptForm",
    async (ctx) => {
        await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∫—É—Ö–Ω—é: ", countryKeyboard);
        ctx.wizard.state.data = {};
        return ctx.wizard.next();
    },
    async (ctx) => {
        console.log(ctx.update.callback_query.message);
        // await ctx.deleteMessage();
        if (!ctx.callbackQuery) {
            return;
        }
        const callbackData = JSON.parse(ctx.callbackQuery.data);
        // console.log(ctx.callbackQuery.data);
        // await ctx.reply(ctx.i18n.t("scenes.report.form.selectedInjury", { name: typeInjury.dataValues.name }));
        // ctx.wizard.state.data.injury = typeInjury.dataValues.id;
        // await ctx.reply(ctx.i18n.t("scenes.report.form.getDescription"), getSkipDescriptionKeyboard(ctx));
        return ctx.wizard.next();
    },
    // async (ctx) => {
    //     if (!/^\d{4}\-\d{2}\-\d{2}$/.test(ctx.message.text)) {
    //         await ctx.reply(ctx.i18n.t("scenes.report.errors.formatDate"));
    //         return;
    //     }
    //     if (!moment(ctx.message.text, "YYYY-MM-DD").isValid()) {
    //         await ctx.reply(ctx.i18n.t("scenes.report.errors.invalidDate"));
    //         return;
    //     }
    //     ctx.wizard.state.data.date = ctx.message.text;
    //     await ctx.reply(ctx.i18n.t("scenes.report.form.getInjury"), typeInjuryKeyboard);
    //     return ctx.wizard.next();
    // },
    // async (ctx) => {
    //     await ctx.deleteMessage();
    //     if (!ctx.callbackQuery) {
    //         return;
    //     }
    //     const callbackData = JSON.parse(ctx.callbackQuery.data);
    //     const typeInjury = await TypeInjury.findByPk(callbackData.id);
    //     await ctx.reply(ctx.i18n.t("scenes.report.form.selectedInjury", { name: typeInjury.dataValues.name }));
    //     ctx.wizard.state.data.injury = typeInjury.dataValues.id;
    //     await ctx.reply(ctx.i18n.t("scenes.report.form.getDescription"), getSkipDescriptionKeyboard(ctx));
    //     return ctx.wizard.next();
    // },
    async (ctx) => {
        // if (ctx.callbackQuery) {
        //     await ctx.deleteMessage();
        //     ctx.wizard.state.data.description = "";
        // } else {
        //     ctx.wizard.state.data.description = ctx.message.text;
        // }
        // let incident = Incident.build({
        //     fullName: ctx.wizard.state.data.fullName,
        //     date: ctx.wizard.state.data.date,
        //     injury: ctx.wizard.state.data.injury,
        //     description: ctx.wizard.state.data.description,
        // });
        // if (ctx.session["reportLocation"].type === "room") {
        //     incident.room = ctx.session["reportLocation"].id;
        // } else {
        //     incident.order = ctx.session["reportLocation"].id;
        // }
        // await incident.save();
        return ctx.scene.leave();
    }
);

// receptForm.leave(async (ctx) => {
//     await ctx.reply(ctx.i18n.t("scenes.start.nextStep"), getMainKeyboard(ctx));
// });

const stage = new Scenes.Stage([receptForm]);

bot.use(session());
bot.use(stage.middleware());

bot.telegram.setMyCommands([
    { command: "start", description: "–ù–∞ –≥–ª–∞–≤–Ω—É—é" },
    { command: "help", description: "–ü–æ–º–æ—â—å" },
]);

bot.start(async (ctx) => {
    await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–í–°!");
    await ctx.scene.enter("receptForm");
});

bot.help(async (ctx) => {
    await ctx.reply("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ /start");
});

bot.launch();

// rabbit
//     .then(function (connection) {
//         var ok = connection.createChannel();
//         ok.then(function (channel) {
//             // durable: true is set by default
//             channel.assertQueue("messages");
//             channel.assertExchange("incoming");
//             channel.bindQueue("messages", "incoming", "mda");
//             channel.consume("messages", function (message) {
//                 console.log(message.content.toString());
//                 channel.ack(message);
//             });
//         });
//         return ok;
//     })
//     .then(null, console.log);

// rabbit
//     .then(function (connection) {
//         var ok = connection.createChannel();
//         ok.then(function (channel) {
//             // durable: true is set by default
//             channel.assertQueue("messages");
//             channel.assertExchange("incoming");
//             channel.bindQueue("messages", "incoming", "mda");
//             for (let i = 0; i < 1000; i++) channel.sendToQueue("messages", Buffer.from("Hello "));
//         });
//         return ok;
//     })
//     .then(null, console.log);
